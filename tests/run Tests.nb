(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     41756,        847]
NotebookOptionsPosition[     41191,        827]
NotebookOutlinePosition[     41543,        843]
CellTagsIndexPosition[     41500,        840]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Run Unit Tests", "Subsubsection",
 CellChangeTimes->{{3.735380164002433*^9, 
  3.735380169310718*^9}},ExpressionUUID->"9bb7907c-10fa-462f-ab4d-\
5fca48223f8b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{
    RowBox[{"ParentDirectory", "@", 
     RowBox[{"NotebookDirectory", "[", "]"}]}], "<>", 
    "\"\</functionArgumentFailure.wl\>\""}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TestReport", "[", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<Testing.wlt\>\""}], 
    "}"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.735380128299549*^9, 3.7353801551375523`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"07b84af7-3327-4374-9df2-6f6225bb77c1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
             Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Testing.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"100", "\"%\""}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["32", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
             Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Testing.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"100", "\"%\""}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["32", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["32", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[
   Association[
   "Title" -> "Test Report: Testing.wlt", "TimeElapsed" -> 
    Quantity[0.52, "Seconds"], "TestsSucceededCount" -> 32, 
    "TestsFailedCount" -> 0, "TestsFailedWrongResultsCount" -> 0, 
    "TestsFailedWithMessagesCount" -> 0, "TestsFailedWithErrorsCount" -> 0, 
    "Aborted" -> False, "TestResults" -> Association[1 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 1, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           functionArgumentFailure`resetFailurelist[]], "ExpectedOutput" -> 
         HoldForm[Null], "ActualOutput" -> HoldForm[Null], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000176`2.3960276656461414, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00017300000000020077`, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 2 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 2, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[
          functionArgumentFailure`resetFailurelist[]; \
$CellContext`failurelist], "ExpectedOutput" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[{}], "ExpectedMessages" -> {}, "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 
         Quantity[0.000087`2.0900342504506124, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00008499999999855845, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 3 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 3, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; $CellContext`test["a"]], "ExpectedOutput" -> HoldForm[1],
          "ActualOutput" -> HoldForm[1], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000451`2.8046915397099523, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0004569999999990415, "Seconds"], "MemoryUsed" -> 
         Quantity[-336, "Bytes"]]], 4 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 4, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; FailureQ[
             $CellContext`test[1]]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "wrongargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "wrongargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000669`2.975941115599815, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0006630000000011904, "Seconds"], "MemoryUsed" -> 
         Quantity[2192, "Bytes"]]], 5 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 5, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; FailureQ[
             $CellContext`test["a", "b"]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toomanyargs"]]},
          "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toomanyargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000504`2.852945534277517, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0005020000000008906, "Seconds"], "MemoryUsed" -> 
         Quantity[1648, "Bytes"]]], 6 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 6, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; FailureQ[
             $CellContext`test[]]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toofewargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toofewargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.00043`2.783983453411576, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00042700000000017724`, "Seconds"], "MemoryUsed" -> 
         Quantity[1256, "Bytes"]]], 7 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 7, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[
          functionArgumentFailure`resetFailurelist[]; 
           ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; $CellContext`test[]; Length[$CellContext`failurelist]], 
         "ExpectedOutput" -> HoldForm[1], "ActualOutput" -> HoldForm[1], 
         "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toofewargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toofewargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000448`2.8017930118301377, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00044399999999988893`, "Seconds"], "MemoryUsed" -> 
         Quantity[-2008, "Bytes"]]], 8 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 8, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[
          functionArgumentFailure`resetFailurelist[]; 
           ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; $CellContext`test[]; $CellContext`test["a", "b"]; 
           Length[$CellContext`failurelist]], "ExpectedOutput" -> HoldForm[2],
          "ActualOutput" -> HoldForm[2], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toofewargs"]], 
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toomanyargs"]]},
          "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toofewargs"], $CellContext`test]], 
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toomanyargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000722`3.0090521954016287, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0007199999999993878, "Seconds"], "MemoryUsed" -> 
         Quantity[1672, "Bytes"]]], 9 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 9, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`type, 
                Blank[]], MemberQ[{"m1", "m2", "m3", "m4"}, #]& ]] := 
            1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; $CellContext`test["m1"]], "ExpectedOutput" -> 
         HoldForm[1], "ActualOutput" -> HoldForm[1], "ExpectedMessages" -> {},
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.00012`2.2296962438796144, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00011600000000022703`, "Seconds"], "MemoryUsed" -> 
         Quantity[192, "Bytes"]]], 10 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 10, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`type, 
                Blank[]], MemberQ[{"m1", "m2", "m3", "m4"}, #]& ], 
              PatternTest[
               Pattern[$CellContext`t, 
                Blank[]], Head[#] == Dataset& ], 
              PatternTest[
               Pattern[$CellContext`xx, 
                Blank[]], Head[#] == Association& ], 
              Pattern[$CellContext`yy, 
               Blank[String]]] := 1; $CellContext`test[
              Pattern[$CellContext`args, 
               BlankNullSequence[]]] := 
            functionArgumentFailure`functionArgumentFailure[$CellContext`test,\
 $CellContext`args]; $CellContext`test["m1", 
             Dataset["t"], 
             Association[""], ""]], "ExpectedOutput" -> HoldForm[1], 
         "ActualOutput" -> HoldForm[1], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000618`2.9415034729208096, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0006140000000005585, "Seconds"], "MemoryUsed" -> 
         Quantity[976, "Bytes"]]], 11 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 11, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]]] := $CellContext`a; Head[
             functionArgumentFailure`Private`wrongArgumentTypes[{1}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> HoldForm[Association], 
         "ActualOutput" -> HoldForm[Association], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "wrongargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "wrongargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000498`2.8477443405917096, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0004939999999997724, "Seconds"], "MemoryUsed" -> 
         Quantity[-360, "Bytes"]]], 12 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 12, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]]] := $CellContext`a; First[
             functionArgumentFailure`Private`wrongArgumentTypes[{1}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> 
         HoldForm["argument(s) which failed the test: a"], "ActualOutput" -> 
         HoldForm["argument(s) which failed the test: a"], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "wrongargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "wrongargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000489`2.8398238569556096, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0004880000000007101, "Seconds"], "MemoryUsed" -> 
         Quantity[368, "Bytes"]]], 13 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 13, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]]] := $CellContext`a; Head[
             functionArgumentFailure`Private`tooManyArguments[{1, 1, 1}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> HoldForm[Association], 
         "ActualOutput" -> HoldForm[Association], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toomanyargs"]]},
          "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toomanyargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.00039`2.741579604858491, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.000385000000001412, "Seconds"], "MemoryUsed" -> 
         Quantity[304, "Bytes"]]], 14 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 14, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]]] := $CellContext`a; Normal[
             functionArgumentFailure`Private`tooManyArguments[{"a", "b", "c"}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> 
         HoldForm[{
           "reason of failure" -> "too many arguments", 
            "Position of failed argument(s)" -> {2, 3}, 
            "List of failed argument(s)" -> {"b", "c"}}], "ActualOutput" -> 
         HoldForm[{
           "reason of failure" -> "too many arguments", 
            "Position of failed argument(s)" -> {2, 3}, 
            "List of failed argument(s)" -> {"b", "c"}}], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toomanyargs"]]},
          "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toomanyargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000389`2.7404645991576997, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0003869999999999152, "Seconds"], "MemoryUsed" -> 
         Quantity[712, "Bytes"]]], 15 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 15, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]], 
              Pattern[$CellContext`b, 
               Blank[String]]] := $CellContext`a; Head[
             functionArgumentFailure`Private`tooFewArguments[{"a"}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> HoldForm[Association], 
         "ActualOutput" -> HoldForm[Association], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toofewargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toofewargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000347`2.6908444726228633, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00034299999999909403`, "Seconds"], "MemoryUsed" -> 
         Quantity[424, "Bytes"]]], 16 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 16, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Pattern[$CellContext`a, 
               Blank[String]], 
              Pattern[$CellContext`b, 
               Blank[String]]] := $CellContext`a; Normal[
             functionArgumentFailure`Private`tooFewArguments[{"a"}, 
              
              functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> 
         HoldForm[{
           "reason of failure" -> "not enough arguments", 
            "Position of failed argument(s)" -> Missing[], 
            "List of failed argument(s)" -> Missing[]}], "ActualOutput" -> 
         HoldForm[{
           "reason of failure" -> "not enough arguments", 
            "Position of failed argument(s)" -> Missing[], 
            "List of failed argument(s)" -> Missing[]}], "ExpectedMessages" -> {
           HoldForm[
            MessageName[
            functionArgumentFailure`functionArgumentFailure, "toofewargs"]]}, 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             functionArgumentFailure`functionArgumentFailure, 
              "toofewargs"], $CellContext`test]]}, "AbsoluteTimeUsed" -> 
         Quantity[0.000347`2.6908444726228655, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00034399999999834563`, "Seconds"], "MemoryUsed" -> 
         Quantity[608, "Bytes"]]], 17 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 17, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           Head[
            functionArgumentFailure`Private`genFailureInfo[{"a"}, 
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> HoldForm[Association], 
         "ActualOutput" -> HoldForm[Association], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.00017`2.3809639192102656, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0001669999999993621, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 18 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 18, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           Normal[
            functionArgumentFailure`Private`genFailureInfo[{"a"}, 
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test], $CellContext`test]]], "ExpectedOutput" -> 
         HoldForm[{
           "reason of failure" -> {"a"}, 
            "Position of failed argument(s)" -> {"a_String", " b_String"}, 
            "List of failed argument(s)" -> $CellContext`test}], 
         "ActualOutput" -> 
         HoldForm[{
           "reason of failure" -> {"a"}, 
            "Position of failed argument(s)" -> {"a_String", " b_String"}, 
            "List of failed argument(s)" -> $CellContext`test}], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000159`2.351912122152441, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00015800000000076864`, "Seconds"], "MemoryUsed" -> 
         Quantity[424, "Bytes"]]], 19 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 19, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           
           functionArgumentFailure`Private`getArgumentnamelist[{
            "", " test", "()"}]], "ExpectedOutput" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[{}], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000134`2.277619796196799, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00012900000000115597`, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 20 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 20, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           
           functionArgumentFailure`Private`getFailedPositionOfPatterntest[{
            1}, {"(a_)?StringQ"}]], "ExpectedOutput" -> HoldForm[{{1}}], 
         "ActualOutput" -> HoldForm[{{1}}], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.00013`2.2644583501388307, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.000128000000000128, "Seconds"], "MemoryUsed" -> 
         Quantity[216, "Bytes"]]], 21 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 21, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           
           functionArgumentFailure`Private`getFailedPositionOfPatterntest[{
            "xx"}, {"(a_)?StringQ"}]], "ExpectedOutput" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[{}], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000118`2.222397005138117, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00011499999999919908`, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 22 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 22, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; FailureQ[
             functionArgumentFailure`setFailure[$CellContext`test, 
              Association["a" -> 1]]]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.00014`2.2966430335102297, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00013600000000124624`, "Seconds"], "MemoryUsed" -> 
         Quantity[368, "Bytes"]]], 23 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 23, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[
          functionArgumentFailure`resetFailurelist[]; 
           ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; 
           functionArgumentFailure`setFailure[$CellContext`test, 
             Association["a" -> 1]]; Length[$CellContext`failurelist]], 
         "ExpectedOutput" -> HoldForm[1], "ActualOutput" -> HoldForm[1], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000134`2.277619796196799, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00013100000000143552`, "Seconds"], "MemoryUsed" -> 
         Quantity[-2064, "Bytes"]]], 24 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 24, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ]] := 1; 
           functionArgumentFailure`Private`findPatternTests[$CellContext`test]\
], "ExpectedOutput" -> HoldForm[{"(a_)?StringQ"}], "ActualOutput" -> 
         HoldForm[{"(a_)?StringQ"}], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000186`2.420027942049906, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0001829999999998222, "Seconds"], "MemoryUsed" -> 
         Quantity[144, "Bytes"]]], 25 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 25, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ], 
              Pattern[$CellContext`b, 
               Blank[Integer]]] := 1; 
           functionArgumentFailure`Private`findPatternTests[$CellContext`test]\
], "ExpectedOutput" -> HoldForm[{"(a_)?StringQ", " b_Integer"}], 
         "ActualOutput" -> HoldForm[{"(a_)?StringQ", " b_Integer"}], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000191`2.431548365079717, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0001899999999981361, "Seconds"], "MemoryUsed" -> 
         Quantity[312, "Bytes"]]], 26 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 26, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              PatternTest[
               Pattern[$CellContext`a, 
                Blank[]], StringQ], 
              Condition[
               Pattern[$CellContext`b, 
                Blank[Integer]], $CellContext`b > 1]] := 1; Length[
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test]]], "ExpectedOutput" -> HoldForm[2], "ActualOutput" -> HoldForm[2], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000181`2.4081935727011743, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00017699999999898353`, "Seconds"], "MemoryUsed" -> 
         Quantity[168, "Bytes"]]], 27 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 27, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`test[
              Condition[
               PatternTest[
                Pattern[$CellContext`b, 
                 Blank[]], AssociationQ], Length[$CellContext`b] > 2]] := 1; 
           Length[
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test]]], "ExpectedOutput" -> HoldForm[1], "ActualOutput" -> HoldForm[1], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000332`2.67165308153603, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0002819999999985612, "Seconds"], "MemoryUsed" -> 
         Quantity[-16, "Bytes"]]], 28 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 28, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`check1[
              Pattern[$CellContext`b, 
               Blank[]]] := Length[$CellContext`b] > 2; $CellContext`test[
              Condition[
               PatternTest[
                Pattern[$CellContext`b, 
                 Blank[]], AssociationQ], 
               $CellContext`check1[$CellContext`b]]] := 1; Length[
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test]]], "ExpectedOutput" -> HoldForm[1], "ActualOutput" -> HoldForm[1], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000209`2.4706612839430453, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.0002080000000006521, "Seconds"], "MemoryUsed" -> 
         Quantity[0, "Bytes"]]], 29 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 29, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[ClearAll[$CellContext`test]; $CellContext`check1[
              Pattern[$CellContext`b, 
               Blank[]]] := Length[$CellContext`b] > 2; $CellContext`test[
              Condition[
               PatternTest[
                Pattern[$CellContext`b, 
                 Blank[]], AssociationQ], 
               $CellContext`check1[$CellContext`b]]] := 1; 
           functionArgumentFailure`Private`findPatternTests[$CellContext`test]\
], "ExpectedOutput" -> HoldForm[{"(b_)?AssociationQ /; check1[b]"}], 
         "ActualOutput" -> HoldForm[{"(b_)?AssociationQ /; check1[b]"}], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000177`2.3984882641938006, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00017399999999945237`, "Seconds"], "MemoryUsed" -> 
         Quantity[160, "Bytes"]]], 30 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 30, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> 
         HoldForm[
          ClearAll[$CellContext`test]; 
           Options[$CellContext`test] = {"test1" -> 1}; $CellContext`test[
              Pattern[$CellContext`b, 
               Blank[Integer]], 
              Pattern[$CellContext`opts, 
               OptionsPattern[]]] := 1; Length[
             
             functionArgumentFailure`Private`findPatternTests[$CellContext`\
test]]], "ExpectedOutput" -> HoldForm[1], "ActualOutput" -> HoldForm[1], 
         "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000204`2.4601451652578903, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00020100000000056184`, "Seconds"], "MemoryUsed" -> 
         Quantity[792, "Bytes"]]], 31 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 31, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           
           functionArgumentFailure`Private`checkFunctionArgumentpattern[{
            1, "a_Integer"}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000112`2.1997330205021735, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00010800000000088517`, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]], 32 -> TestResultObject[
        Association[
        "TestClass" -> None, "TestIndex" -> 32, "TestID" -> None, "Outcome" -> 
         "Success", "Input" -> HoldForm[
           
           functionArgumentFailure`Private`checkFunctionArgumentpattern[{
            "a", "a_Integer"}]], "ExpectedOutput" -> HoldForm[False], 
         "ActualOutput" -> HoldForm[False], "ExpectedMessages" -> {}, 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         Quantity[0.000101`2.1548363716146364, "Seconds"], "CPUTimeUsed" -> 
         Quantity[0.00009899999999873899, "Seconds"], "MemoryUsed" -> 
         Quantity[56, "Bytes"]]]], 
    "TestsSucceededIndices" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
     "TestsFailedIndices" -> {}, "TestsFailedWrongResultsIndices" -> {}, 
    "TestsFailedWithMessagesIndices" -> {}, 
    "TestsFailedWithErrorsIndices" -> {}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7353801578203173`*^9, 3.735380359150769*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ff90b587-23ed-48a4-9a59-c819acc23854"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 911},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 165, 3, 45, "Subsubsection",ExpressionUUID->"9bb7907c-10fa-462f-ab4d-5fca48223f8b"],
Cell[CellGroupData[{
Cell[770, 29, 587, 15, 52, "Input",ExpressionUUID->"07b84af7-3327-4374-9df2-6f6225bb77c1"],
Cell[1360, 46, 39803, 777, 98, "Output",ExpressionUUID->"ff90b587-23ed-48a4-9a59-c819acc23854"]
}, Open  ]]
}, Open  ]]
}
]
*)

